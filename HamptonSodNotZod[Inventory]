//Author: Trevon Hampton
//Course: Cpt 187
//Purpose:
//CreateDate: 12/04/2019

package edu.cpt187.hampton.exercise6;

import java.util.Random;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

public class Inventory 
{
	private final String [] DISCOUNT_NAMES = {"Member", "Senior", "None"};
	private final double [] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String [] PRIZE_NAMES = {"Free soda", "Free coupon", "Free car"};
	private final int MAX_ITEMS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private int [] itemIDs = new int [MAX_ITEMS];
	private String [] itemNames = new String [MAX_ITEMS];
	private double [] itemPrices = new double [MAX_ITEMS];
	private int [] orderQuantity = new int[MAX_ITEMS];
	private double [] orderTotal = new double[MAX_ITEMS];
	private int [] inStockCounts = new int [MAX_ITEMS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;
	private Random prizeGenerator = new Random();

	Inventory()
	{	
	}//End of Constructor

	//Setters
	public void setReducedStock (int borrowedHowMany)
	{
		while(inStockCounts[itemSearchIndex] > borrowedHowMany)
		{
			inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
		}
	}//End of setReducedStock

	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		try 
		{
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));

			while (infile.hasNext() == true && recordCount < MAX_ITEMS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}//End of array loaded
			
			setBubbleSort();
			infile.close();
		}//End of try

		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//End of catch
	}//End of setLoadItems

	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		try 
		{
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));

			while (infile.hasNext() == true && recordCount < MAX_ITEMS && recordCount < borrowedSize)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantity[recordCount] = infile.nextInt();
				orderTotal[recordCount] = infile.nextDouble();
				recordCount++;
			}//End of array loaded

			infile.close();
		}//End of try

		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//End of catch
	}//End of overloaded setLoadItems

	public void setSearchIndex(int borrowedTarget)
	{
		itemSearchIndex = getSearchResuts(borrowedTarget);
	}//End of setSearchIndex
	
	public void setBubbleSort()
	{
		final int ZERO = 0;
		int last = recordCount -1;
		int index = itemSearchIndex;
		boolean swap = false;
		
		while (last > ZERO)
		{
			index = ZERO;
			swap = false;
			
			while (index < last)
			{
				if (itemIDs[index] > itemIDs[index + 1])
				{
					swapArrayElements(index);
					swap = true;
				}//End of array element swapping
				index++;
			}//End of sort test
			
			if (swap == false)
			{
				last = ZERO;
			}
			else
			{
				last = last -1;
			}
		}//End of sorting array
	}//End of setBubbleSort

	//SwapArray
	public void swapArrayElements (int borrowedIndex)
	{
		int localItemID = itemIDs[borrowedIndex];
		String localItemName = itemNames[borrowedIndex];
		double localItemPrice = itemPrices[borrowedIndex];
		int localInStockCount = inStockCounts[borrowedIndex];

		itemIDs[borrowedIndex] = itemIDs[borrowedIndex+1];
		itemIDs[borrowedIndex+1] = localItemID;

		itemNames[borrowedIndex] = itemNames[borrowedIndex+1];
		itemNames[borrowedIndex+1] = localItemName;

		itemPrices[borrowedIndex] = itemPrices[borrowedIndex+1];
		itemPrices[borrowedIndex+1] = localItemPrice;		

		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex+1];
		inStockCounts[borrowedIndex+1] = localInStockCount;
	}//End of setSwapArrayElements
	
	//Getters
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//End of getInStockCounts
	
	public int getItemID()
	{
		return itemIDs[itemSearchIndex];
	}//End of getItemID
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}//End of getItemIDs

	public String[] getItemNames()
	{
		return itemNames;
	}//End of getItemNames

	public double[] getItemPrices()
	{
		return itemPrices;
	}//End of getItemPrices

	public String[] getDiscoutNames()
	{
		return DISCOUNT_NAMES;
	}//End of getDiscoutNames;

	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//End of getDiscountRates
	
	public int[] getOrderQuantity()
	{
		return orderQuantity;
	}//End of getOrderQuantity
	
	public double[] getOrderTotal()
	{
		return orderTotal;
	}//End of getOrderQuantity

	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//End of getPrizeNames

	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//End of getRandomNumber

	public int getSearchIndex()
	{
		return itemSearchIndex;
	}//End of getSearchIndex

	public int getRecordCount()
	{
		return recordCount;
	}//End of getRecordCount

	public int getSearchResuts(int borrowedBorrowedTarget)
	{
		int first = 0;
		int last = recordCount - 1;
		boolean found = false;
		int mid = 0;

		while(first <= last && found == false)
		{
			mid = (first + last) / 2;
			if (itemIDs[mid] == borrowedBorrowedTarget)
			{
				found = true;
			}//Search found
			else
			{
				if(itemIDs[mid] < borrowedBorrowedTarget)
				{
					first = mid + 1;
				}
				else
				{
					last = mid + 1;
				}
			}//Search NOT found
		}//End of run-while search
		if (found == false)
		{
			mid = NOT_FOUND;
		}//Search failed

		return mid;
	}//End of getSearchResuts
}//End of Inventory Class
